package jdbcdemo.dao;

import java.sql.Connection;
//import java.sql.Connection;
//import java.sql.DriverManager;
//import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
//import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import jdbcdemo.dao.mappers.ResultSetMapper;
import jdbcdemo.dao.uow.Entity;
import jdbcdemo.dao.uow.UnitOfWork;
import jdbcdemo.domain.Egzamin;

public class EgzaminRepository extends RepositoryBase<Egzamin> implements Repository<Egzamin>{
	// Connection connection;

	// CREATE TABLE - tworzenie tabel
	private static final String createTableSql = "CREATE TABLE egzamin" + "(id BIGINT GENERATED BY DEFAULT AS IDENTITY,"
			+ "dataGodzina TIMESTAMP, " + "zdany BOOLEAN, " + "idKursant BIGINT);"; 

	// INSERT - dodawanie danych do tabeli
	private static final String insertSql = "INSERT INTO EGZAMIN (dataGodzina, zdany, idKursant) VALUES (?,?,?)";

	// UPDATE - modyfikacja rekordów
	private static final String updateSql = "UPDATE EGZAMIN SET (dataGodzina, zdany, idKursant) = (?,?,?) WHERE id=?";

	// DELETE - usuwanie
	private static final String deleteSql = "DELETE FROM EGZAMIN WHERE id=?";

	// SELECT - wyświetlanie, wskazywanie
	private static final String selectAllSql = "SELECT * FROM EGZAMIN";



	public EgzaminRepository(Connection connection, ResultSetMapper<Egzamin> mapper, UnitOfWork uow) throws SQLException{ 
		super(connection, mapper, uow);

		
	}

	public List<Egzamin> getAll() throws SQLException {
		List<Egzamin> result = new ArrayList<Egzamin>();

		ResultSet rs = selectAll.executeQuery();
		while (rs.next()) {
			Egzamin e = new Egzamin();
			e.setId(rs.getLong("id"));
			e.setDataGodzina(rs.getDate("dataGodzina"));
			e.setZdany(rs.getBoolean("zdany"));
			e.setIdKursant(rs.getLong("idKursant"));
			result.add(e);
		}

		return result;
	}

//	public void add(Egzamin egzamin) throws SQLException {
//
//		insert.setDate(1, new java.sql.Date(egzamin.getDataGodzina().getTime()));
//		insert.setBoolean(2, Boolean.TRUE.equals(egzamin.getZdany()));
//		if (egzamin.getIdKursant() == null) {
//			insert.setNull(3, java.sql.Types.BIGINT);
//		} else {
//
//			insert.setLong(3, egzamin.getIdKursant());
//		}
//
//		insert.executeUpdate();
//
//	}

//	public void update(Egzamin egzamin) {
//
//		try {
//			update.setDate(1, new java.sql.Date(egzamin.getDataGodzina().getTime()));
//			update.setBoolean(2, egzamin.getZdany());
//			update.setLong(3, egzamin.getIdKursant());
//			// where id=?
//			update.setLong(4, egzamin.getId());
//
//			update.executeUpdate();
//		} catch (SQLException ex) {
//			ex.printStackTrace();
//		}
//	}

	

	public void createTable() throws SQLException {

		ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
		boolean tableExists = false;
		while (rs.next()) {
			String string = rs.getString("TABLE_NAME");
			if (string.equalsIgnoreCase("egzamin")) {
				tableExists = true;
				break;
			}
		}
		if (!tableExists)
			createTable.executeUpdate(createTableSql);
	}

	@Override
	protected String deleteSql() {
		return deleteSql;
	}

	@Override
	protected String updateSql() {
		return updateSql;
	}

	@Override
	protected String insertSql() {
		return insertSql;
	}

	@Override
	protected String selectAllSql() {
		return selectAllSql;
	}

	

	@Override
	protected void setupUpdate(Egzamin entity) throws SQLException {
		update.setDate(1, new java.sql.Date(entity.getDataGodzina().getTime()));
		update.setBoolean(2, entity.getZdany());
		update.setLong(3, entity.getIdKursant());
		// where id=?
		update.setLong(4, entity.getId());

	}

	@Override
	protected void setupInsert(Egzamin entity) throws SQLException {
		insert.setDate(1, new java.sql.Date(entity.getDataGodzina().getTime()));
		insert.setBoolean(2, Boolean.TRUE.equals(entity.getZdany()));
		if (entity.getIdKursant() == null) {
			insert.setNull(3, java.sql.Types.BIGINT);
		} else {

			insert.setLong(3, entity.getIdKursant());
		}

		
	}

	

}
