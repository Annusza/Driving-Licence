package jdbcdemo.dao;

import java.sql.Connection;

import java.sql.ResultSet;
import java.sql.SQLException;
//import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import jdbcdemo.dao.mappers.ResultSetMapper;
import jdbcdemo.dao.uow.UnitOfWork;
import jdbcdemo.domain.Egzamin;

import jdbcdemo.domain.Kursant;

public class KursantRepository extends RepositoryBase<Kursant> implements Repository<Kursant> {

	private static final String NAZWA_TABELI = "kursant";

	// Connection connection;

	private static final String createTableSql = "CREATE TABLE " + NAZWA_TABELI
			+ "(id BIGINT GENERATED BY DEFAULT AS IDENTITY, imie VARCHAR(20), nazwisko VARCHAR(50), telefon INTEGER, nrPesel VARCHAR(11), dataUrodzenia DATE, rozpoczecieKursu DATE)"; // KLUCZ
																																														// OBCY
																																														// ID_INSTRUKTOR???

	private static final String insertSql = "INSERT INTO " + NAZWA_TABELI
			+ "(imie, nazwisko, telefon, nrPesel, dataUrodzenia, rozpoczecieKursu) VALUES (?, ?, ?, ?, ?, ?)";
	private static final String updateSql = "UPDATE " + NAZWA_TABELI
			+ " SET (imie, nazwisko, telefon, nrPesel, dataUrodzenia, rozpoczecieKursu) = (?, ?, ?, ?, ?, ?) WHERE id=?";
	private static final String deleteSql = "DELETE FROM " + NAZWA_TABELI + " WHERE id=?";
	private static final String selectAllSql = "SELECT * FROM " + NAZWA_TABELI;

	// private Statement createTable;
	// private PreparedStatement insert;
	// private PreparedStatement selectAll;
	// private PreparedStatement update;
	// private PreparedStatement delete;

	public KursantRepository(Connection connection, ResultSetMapper<Kursant> mapper, UnitOfWork uow)
			throws SQLException {
		super(connection, mapper, uow);
	}

	public List<Kursant> getAll() throws SQLException {
		List<Kursant> result = new ArrayList<Kursant>();

		ResultSet rs = selectAll.executeQuery();
		while (rs.next()) {
			Kursant k = new Kursant();
			k.setId(rs.getLong("id"));
			k.setImie(rs.getString("imie"));
			k.setNazwisko(rs.getString("nazwisko"));

			k.setTelefon(rs.getInt("telefon"));
			k.setNrPesel(rs.getString("nrPesel"));
			k.setDataUrodzenia(rs.getDate("dataUrodzenia"));
			k.setRozpoczecieKursu(rs.getDate("rozpoczecieKursu"));
			result.add(k);
		}

		return result;
	}

	// public void add(Kursant kursant) throws SQLException {
	//
	// insert.setString(1, kursant.getImie());
	// insert.setString(2, kursant.getNazwisko());
	// insert.setInt(3, kursant.getTelefon()); // CZY TU OK - INTEGER?
	// insert.setString(4, kursant.getNrPesel());
	// insert.setDate(5, new
	// java.sql.Date(kursant.getDataUrodzenia().getTime()));
	// insert.setDate(6, new
	// java.sql.Date(kursant.getRozpoczecieKursu().getTime()));
	//
	// insert.executeUpdate();
	//
	// }

	// public void update(Kursant kursant) {
	//
	// try {
	// update.setString(1, kursant.getImie());
	// update.setString(2, kursant.getNazwisko());
	// update.setInt(3, kursant.getTelefon());
	// update.setString(4, kursant.getNrPesel());
	// update.setDate(5, new
	// java.sql.Date(kursant.getDataUrodzenia().getTime()));
	// update.setDate(6, new
	// java.sql.Date(kursant.getRozpoczecieKursu().getTime()));
	// update.setLong(7, kursant.getId());
	// update.executeUpdate();
	// } catch (SQLException ex) {
	// ex.printStackTrace();
	// }
	// }

	public void createTable() {
		try {

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if (rs.getString("TABLE_NAME").equalsIgnoreCase(NAZWA_TABELI)) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists)
				createTable.executeUpdate(createTableSql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	protected String deleteSql() {
		return deleteSql;
	}

	@Override
	protected String updateSql() {
		return updateSql;
	}

	@Override
	protected String insertSql() {
		return insertSql;
	}

	@Override
	protected String selectAllSql() {
		return selectAllSql;
	}

	@Override
	protected void setupUpdate(Kursant entity) throws SQLException {

		update.setString(1, entity.getImie());
		update.setString(2, entity.getNazwisko());
		update.setInt(3, entity.getTelefon());
		update.setString(4, entity.getNrPesel());
		update.setDate(5, new java.sql.Date(entity.getDataUrodzenia().getTime()));
		update.setDate(6, new java.sql.Date(entity.getRozpoczecieKursu().getTime()));
		update.setLong(7, entity.getId());

	}

	@Override
	protected void setupInsert(Kursant entity) throws SQLException {
		insert.setString(1, entity.getImie());
		insert.setString(2, entity.getNazwisko());
		insert.setInt(3, entity.getTelefon());
		insert.setString(4, entity.getNrPesel());
		insert.setDate(5, new java.sql.Date(entity.getDataUrodzenia().getTime()));
		insert.setDate(6, new java.sql.Date(entity.getRozpoczecieKursu().getTime()));

		if (entity.getId() == null) {
			insert.setNull(3, java.sql.Types.BIGINT);
		} else {

			insert.setLong(3, entity.getId());
		}

	}

}
